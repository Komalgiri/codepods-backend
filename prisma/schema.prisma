// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Supabase connection string
}

//////////////////////////
// User & Auth
//////////////////////////
model User {
  id           String       @id @default(cuid())
  email        String?      @unique        // optional for GitHub users
  password     String?                      // optional for GitHub users
  name         String?
  role         String       @default("user")
  pods         PodMember[]
  tasks        Task[]
  rewards      Reward[]
  activities   Activity[]
  skills       Skill[]      @relation("UserSkills")
  createdAt    DateTime     @default(now())

  // GitHub OAuth fields
  githubId     String?      @unique
  githubToken  String?      // we'll encrypt this
}

//////////////////////////
// Pods & Collaboration
//////////////////////////
model Pod {
  id          String       @id @default(cuid())
  name        String
  description String?
  repoOwner   String?      // GitHub org or username
  repoName    String?      // GitHub repo name
  members     PodMember[]  // relation to User via join table
  tasks       Task[]       // tasks inside pod
  activities  Activity[]
  createdAt   DateTime     @default(now())
}

model PodMember {
  id       String @id @default(cuid())
  userId   String
  podId    String
  role     String   // "admin" / "member" / "maintainer"

  user User @relation(fields: [userId], references: [id])
  pod  Pod  @relation(fields: [podId], references: [id])

  @@unique([userId, podId]) // prevent duplicate membership
}

//////////////////////////
// Tasks
//////////////////////////
model Task {
  id        String   @id @default(cuid())
  title     String
  status    String   @default("pending") // pending, in-progress, done
  podId     String
  assignedTo String?

  pod   Pod   @relation(fields: [podId], references: [id])
  user  User? @relation(fields: [assignedTo], references: [id])

  createdAt DateTime @default(now())
  dueAt     DateTime?
}

//////////////////////////
// Activity & Rewards
//////////////////////////
model Activity {
  id        String   @id @default(cuid())
  type      String   // "commit", "pr_opened", "repo_created", etc.
  meta      Json?    // raw payload or parsed details
  value     Int      @default(0)  // points for this activity
  userId    String
  podId     String?

  user      User     @relation(fields: [userId], references: [id])
  pod       Pod?     @relation(fields: [podId], references: [id])
  createdAt DateTime @default(now())
}

model Reward {
  id        String   @id @default(cuid())
  points    Int      @default(0)
  badges    String[] // list of badge slugs
  reason    String?
  userId    String

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Badge {
  id          String @id @default(cuid())
  slug        String @unique
  title       String
  description String
  icon        String? // URL or asset name
  points      Int
}

//////////////////////////
// Skills (optional for Skill Exchange)
//////////////////////////
model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}
